/*
** 2006 July 10
**
** The author disclaims copyright to this source code.
**
*************************************************************************
** Defines the interface to tokenizers used by fulltext-search.  There
** are three basic components:
**
** sqlite3_tokenizer_module is a singleton defining the tokenizer
** interface functions.  This is essentially the class structure for
** tokenizers.
**
** sqlite3_tokenizer is used to define a particular tokenizer, perhaps
** including customization information defined at creation time.
**
** sqlite3_tokenizer_cursor is generated by a tokenizer to generate
** tokens from a particular input.
*/
#ifndef _FTS2_TOKENIZER_H_
#define _FTS2_TOKENIZER_H_

#include "sqlite3.h"

typedef struct sqlite3_tokenizer_module sqlite3_tokenizer_module;
typedef struct sqlite3_tokenizer sqlite3_tokenizer;
typedef struct sqlite3_tokenizer_cursor sqlite3_tokenizer_cursor;

struct sqlite3_tokenizer_module {

  int iVersion;

  int (*xCreate)(
    int argc,                           
    const char *const*argv,             
    sqlite3_tokenizer **ppTokenizer     
  );

  int (*xDestroy)(sqlite3_tokenizer *pTokenizer);

  int (*xOpen)(
    sqlite3_tokenizer *pTokenizer,       
    const char *pInput, int nBytes,      
    sqlite3_tokenizer_cursor **ppCursor  
  );

  int (*xClose)(sqlite3_tokenizer_cursor *pCursor);

  int (*xNext)(
    sqlite3_tokenizer_cursor *pCursor,   
    const char **ppToken, int *pnBytes,  
    int *piStartOffset,  
    int *piEndOffset,    
    int *piPosition      
  );
};

struct sqlite3_tokenizer {
  const sqlite3_tokenizer_module *pModule;  
  
};

struct sqlite3_tokenizer_cursor {
  sqlite3_tokenizer *pTokenizer;       
  
};

#endif 
